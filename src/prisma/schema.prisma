generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  googleId          String?         @unique
  facebookId        String?         @unique
  status            UserStatus      @default(PENDING)
  profilePicture    String?
  fullname          String
  password          String?
  telephone         String?
  country           String?
  accountType       AccountType     @default(BUYER)
  cartItems         Cart[]
  orders            Order[]
  myRatings         Rating[]
  store             Store?          @relation(name: "myPersonalStore")
  favouriteStores   Store[]         @relation(name: "myFavouriteStores")
  favouriteProducts Product[]
  verifyUser        verifyUser?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  sellerMessage     sellerMessage[]
  address           Address?

  @@map("users")
}

model Store {
  id                      String                    @id @default(cuid())
  name                    String                    @unique
  description             String                    @db.VarChar(255)
  image                   String?
  location                String
  userId                  String                    @unique
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  orders                  Order[]
  products                Product[]
  user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade, name: "myPersonalStore")
  favourite               User[]                    @relation(name: "myFavouriteStores")
  SellerDashboard         SellerDashboard[]
  SellerPaymentHistory    SellerPaymentHistory[]
  SellerWithdrawalHistory SellerWithdrawalHistory[]
  orderDeliveryStatus     orderDeliveryStatus[]
  shippingFee             Float                     @default(2.99)
  sellerMessage           sellerMessage[]
  bankDetails             BankDetails?

  @@map("store")
}

model Product {
  id                 String         @id @default(cuid())
  name               String
  itemCondition      ItemContitions
  salesType          SalesType      @default(ONCE)
  endBiddingDate     DateTime?
  amount             Float          @default(0)
  quantity           Int            @default(0)
  details            String         @db.VarChar(255)
  publish            Boolean        @default(true)
  coverImage         String
  /// [productImages]
  images             Json?          @default("[]")
  returnPolicy       String?
  location           String?
  storeId            String
  discount           Boolean        @default(false)
  discountPercentage Float          @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  carts              Cart[]
  orders             Order[]
  store              Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categories         Category[]
  favourite          User[]

  @@unique([storeId, name])
  @@map("products")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Cart {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("carts")
}

model Order {
  id                   String                 @id @default(cuid())
  orderId              Int                    @unique
  amount               Float
  /// [orderQuantity]
  quantity             Json                   @default("[]")
  status               orderDeliveryStatus[]
  userId               String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  products             Product[]
  stores               Store[]
  user                 User?                  @relation(fields: [userId], references: [id])
  transaction_id       String?
  payment_status       Boolean                @default(false)
  date_paid            DateTime?
  sellerPaymentHistory SellerPaymentHistory[]
  rating               Rating[]

  @@map("orders")
}

model Tracker {
  id                  String               @id @default(uuid())
  progress            Int                  @default(0)
  currentLocation     String?
  description         String?              @db.VarChar(255)
  status              TrackerStatus        @default(PENDING)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  orderDeliveryStatus orderDeliveryStatus?

  @@map("deliverytracker")
}

model Rating {
  id             String                @id @default(uuid())
  rating         Int
  review         String
  userId         String
  order          Order                 @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  user           User                  @relation(fields: [userId], references: [id], onDelete: NoAction)
  orderDelivered orderDeliveryStatus[]

  @@map("ratings")
}

model SellerDashboard {
  id         String                    @id @default(uuid())
  amount     Float                     @default(0)
  updatedAt  DateTime                  @updatedAt
  createdAt  DateTime                  @default(now())
  store      Store                     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId    String                    @unique
  withdrawal SellerWithdrawalHistory[]
  payment    SellerPaymentHistory[]

  @@map("sellersdashboard")
}

model SellerPaymentHistory {
  id                String           @id @default(uuid())
  amount            Float            @default(0)
  updatedAt         DateTime         @updatedAt
  createdAt         DateTime         @default(now())
  store             Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId           String
  order             Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId           String           @unique
  SellerDashboard   SellerDashboard? @relation(fields: [sellerDashboardId], references: [id])
  sellerDashboardId String?

  @@map("sellerspaymenthistory")
}

model SellerWithdrawalHistory {
  id                String           @id @default(uuid())
  amount            Float            @default(0)
  createdAt         DateTime         @default(now())
  store             Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId           String
  sellerDashboard   SellerDashboard? @relation(fields: [sellerDashboardId], references: [id])
  sellerDashboardId String?

  @@map("sellerswithdrawalhistory")
}

model orderDeliveryStatus {
  id        String      @id @default(uuid())
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  store     Store       @relation(fields: [storeId], references: [id])
  storeId   String
  status    OrderStatus @default(PENDING)
  tracker   Tracker?    @relation(fields: [trackerId], references: [id])
  trackerId String?     @unique
  reviews   Rating[]
  updatedAt DateTime    @updatedAt
  createdAt DateTime    @default(now())

  @@map("orderdeliverystatus")
}

model Sessions {
  session_id String @id @db.VarChar(128)
  expires    Int
  data       String @db.MediumText

  @@map("sessions")
}

model sellerMessage {
  id        String       @id @unique @default(cuid())
  from      MessagesFrom @default(USER)
  store     Store        @relation(fields: [storeId], references: [id])
  storeId   String
  user      User?        @relation(fields: [userId], references: [id])
  userId    String?
  message   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("sellermessage")
}

model Settings {
  id            String   @id @unique @default(cuid())
  profitPercent Float    @default(10)
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  @@map("settings")
}

model BankDetails {
  id            String   @unique @default(cuid())
  store         Store    @relation(fields: [storeId], references: [id])
  storeId       String   @unique
  accountNumber String
  bank          String
  nameOnAccount String?
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  @@unique([storeId, accountNumber, nameOnAccount])
  @@map("bankdetails")
}

model Address {
  id          String   @unique @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  houseNumber String?
  street      String?
  postCode    Int?
  city        String
  country     String   @default("United Kingdom")
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@map("addresses")
}

model verifyUser {
  id        String   @id @default(cuid())
  userId    String   @unique(map: "VerifyUser_userId_key")
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserStatus {
  VERIFIED
  PENDING
  FAILED
}

enum OrderStatus {
  PENDING
  DISPATCHED
  DELIVERED
}

enum MessagesFrom {
  USER
  ADMIN
}

enum AccountType {
  BUYER
  SELLER
  ADMIN
}

enum TrackerStatus {
  PENDING
  DELAYED
  CANCELLED
  PAUSED
}

enum ItemContitions {
  NEW
  USED
  REFURBISHED
}

enum SalesType {
  BIDDING
  ONCE
}
