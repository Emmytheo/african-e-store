generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://ushengin_rayvvin:rayvvin@@ushengineering.com:3306/ushengin_rayvvin"
}

model User {
  id                String      @id @default(cuid())
  email             String      @unique
  googleId          String?     @unique
  facebookId        String?     @unique
  status            UserStatus  @default(PENDING)
  profilePicture    String?
  fullname          String
  password          String?
  telephone         String?
  country           String?
  accountType       AccountType @default(BUYER)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  cartItems         Cart[]
  orders            Order[]
  myRatings         Rating[]
  store             Store?      @relation(name: "myPersonalStore")
  favouriteStores   Store[]     @relation(name: "myFavouriteStores")
  favouriteProducts Product[]
  verifyUser        verifyUser?

  @@map("users")
}

model Store {
  id          String    @id @default(cuid())
  name        String    @unique
  description String    @db.VarChar(255)
  image       String?
  location    String
  userId      String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
  products    Product[]
  ratings     Rating[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, name: "myPersonalStore")
  favourite   User[]    @relation(name: "myFavouriteStores")

  @@map("store")
}

model Product {
  id                 String         @id @default(cuid())
  name               String
  itemCondition      ItemContitions
  salesType          SalesType      @default(ONCE)
  endBiddingDate     DateTime?
  amount             Float          @default(0)
  quantity           Int            @default(0)
  details            String         @db.VarChar(255)
  publish            Boolean        @default(true)
  coverImage         String
  images             String         @default("[]") @db.LongText
  returnPolicy       String?
  location           String?
  storeId            String
  shippingDetails    String?        @default("{}") @db.LongText
  discount           Boolean        @default(false)
  discountPercentage Int            @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  carts              Cart[]
  orders             Order[]
  store              Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  ratings            Rating[]
  categories         Category[]
  favourite          User[]

  @@unique([storeId, name])
  @@map("products")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Cart {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("carts")
}

model Order {
  id              String        @id @default(cuid())
  amount          Float
  quantity        String        @db.LongText
  status          OrderStatus   @default(PENDING)
  shippingDetails String        @db.LongText
  userId          String?
  storeId         String
  trackingId      String?       @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  products        Product[]
  store           Store         @relation(fields: [storeId], references: [id])
  tracker         Tracker?      @relation(fields: [trackingId], references: [id])
  user            User?         @relation(fields: [userId], references: [id])
  Rating          Rating[]
  transaction_id  String?
  payment_status  PaymentStatus @default(PENDING)
  date_paid       DateTime?

  @@map("orders")
}

model Tracker {
  id              String        @id @default(uuid())
  progress        Int           @default(0)
  currentLocation String?
  description     String?       @db.VarChar(255)
  status          TrackerStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order?

  @@map("tracks")
}

model Rating {
  id        String   @id @default(uuid())
  rating    Int
  review    String?
  productId String
  storeId   String
  userId    String
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@map("ratings")
}

model Sessions {
  session_id String @id @db.VarChar(128)
  expires    Int
  data       String @db.MediumText

  @@map("sessions")
}

model verifyUser {
  id        String   @id @default(cuid())
  userId    String   @unique(map: "VerifyUser_userId_key")
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserStatus {
  VERIFIED
  PENDING
  FAILED
}

enum OrderStatus {
  DELIVERED
  PENDING
  FAILED
}

enum AccountType {
  BUYER
  SELLER
  ADMIN
}

enum PaymentStatus {
  SUCCEEDED
  FAILED
  BLOCKED
  CANCELED
  INCOMPLETE
  PENDING
  REFUNDED
}

enum TrackerStatus {
  PENDING
  DELAYED
  CANCELLED
  PAUSED
}

enum ItemContitions {
  NEW
  USED
  REFURBISHED
}

enum SalesType {
  BIDDING
  ONCE
}
